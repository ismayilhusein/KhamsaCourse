@model KhamsaCourseProject.Areas.Admin.Dtos.UserCreateDto

@{
    ViewData["Title"] = "İstifadəçi Qeydiyyatı";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<h1>Yeni İstifadəçi</h1>
<hr />
<form asp-action="Create">
    <div class="row justify-content-between">

        <div class="col-md-4">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Username" class="control-label">İstifadəçi adı</label>
                <input asp-for="Username" placeholder="İstifadəçi adı" class="form-control" />
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label">Şifrə</label>
                <input asp-for="Password" placeholder="Şifrə" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Name" class="control-label">Ad</label>
                <input asp-for="Name" placeholder="Ad" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Surname" class="control-label">Soyad</label>
                <input asp-for="Surname" placeholder="Soyad" class="form-control" />
                <span asp-validation-for="Surname" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Permission" class="control-label">Vəzifə</label>
                <input asp-for="Permission" placeholder="Vəzifə" class="form-control" />
                <span asp-validation-for="Permission" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="MobileNumber" class="control-label">Əlaqə Nömrəsi</label>
                <input asp-for="MobileNumber" placeholder="Əlaqə Nömrəsi" id="phone" class="form-control" />
                <span asp-validation-for="MobileNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label">Email</label>
                <input asp-for="Email" placeholder="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Göndər" class="btn btn-primary" />
            </div>

        </div>
        <div class="col-md-4">
            <h4>Filiallar</h4>
            @foreach (var item in Model.SectorUser)
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="Sectors" value="@item.Id" id="defaultCheck1">
                    <label class="form-check-label" for="defaultCheck1">
                        @item.Name
                    </label>
                </div>
            }
        </div>
        <div class="col-md-4">
            <h4>Vəzifələr</h4>
            @foreach (var item in Model.ActivityUser)
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="Activities" value="@item.Id" id="defaultCheck1">
                    <label class="form-check-label" for="defaultCheck1">
                        @item.Name
                    </label>
                </div>
            }
        </div>
    </div>
</form>

<div>
    <a asp-action="Index">Geri</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        const isNumericInput = (event) => {
            const key = event.keyCode;
            return ((key >= 48 && key <= 57) || // Allow number line
                (key >= 96 && key <= 105) // Allow number pad
            );
        };

        const isModifierKey = (event) => {
            const key = event.keyCode;
            return (event.shiftKey === true || key === 35 || key === 36) || // Allow Shift, Home, End
                (key === 8 || key === 9 || key === 13 || key === 46) || // Allow Backspace, Tab, Enter, Delete
                (key > 36 && key < 41) || // Allow left, up, right, down
                (
                    // Allow Ctrl/Command + A,C,V,X,Z
                    (event.ctrlKey === true || event.metaKey === true) &&
                    (key === 65 || key === 67 || key === 86 || key === 88 || key === 90)
                )
        };

        const enforceFormat = (event) => {
            // Input must be of a valid number format or a modifier key, and not longer than ten digits
            if (!isNumericInput(event) && !isModifierKey(event)) {
                event.preventDefault();
            }
        };

        const formatToPhone = (event) => {
            if (isModifierKey(event)) { return; }

            const input = event.target.value.replace(/\D/g, '').substring(0, 10); // First ten digits of input only
            const areaCode = input.substring(0, 3);
            const middle = input.substring(3, 6);
            const last = input.substring(6, 10);

            if (input.length > 6) { event.target.value = `(${areaCode}) ${middle} - ${last}`; }
            else if (input.length > 3) { event.target.value = `(${areaCode}) ${middle}`; }
            else if (input.length > 0) { event.target.value = `(${areaCode}`; }
        };

        const inputElement = document.getElementById('phone');
        inputElement.addEventListener('keydown', enforceFormat);
        inputElement.addEventListener('keyup', formatToPhone);
    </script>
    @if (TempData["User-Error"] is object)
    {
        <script>
            Swal.fire({
                icon: 'error',
                text: 'İstifadəçi adı mövcuddurç başqa ad sınayın'
            })
        </script>
    }
}
